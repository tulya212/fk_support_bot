
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
API_TOKEN = '7177666983:AAHgWg6yZKhaJ-BZRACUkxi68bfgDrj2SvI'

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
allowed_serials = {
    "0010258608", "0010289689", "0010289069", "0010289073", "0010289071",
    "0010289697", "0010289699", "0010289310", "0010289690", "0010289070",
    "0010276287", "0010289230", "0010294124", "0010299304", "0010299303",
     "0010298017",
"0010298018",
"0010298101",
"0010298019",
"0010298102",
"0010298020",
"0010298016",
"0010304011",
"0010301717",
"0010302157",
"0010301716",
"0010302153",
"0010302156",
"0010302154",
"0010301192",
"0010301720",
"0010299329",
"0010299330",
"0010302155",
"0010299327",
"0010276286",
"0010308785",
"0010305788",
"0010306890",
"0010305791",
"0010305892",
"0010305790",
"0010306889",
"0010306887",
"0010308786",
"0010306892",
"0010308789",
"0010311210",
"0010311510",
"0010311511",
"0010311507",
"0010306879",
"0010311509",
"0010311508",
"0010313377",
"0010313378",
"0010311669",
"0010289067",
"0010289693",
"10280734",
"0010289071",
"0010289697",
"0010289699",
"0010271325",
"0010289062",
"2024416002",
"0010299302",
"0010313904",
"0010314805",
"0010317827",
"0010317828",
"2411129852",
"0010308787"	
}

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add("‚òï –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã")

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
model_menu = ReplyKeyboardMarkup(resize_keyboard=True)
model_menu.add("Azkoyen Vitro S1", "Azkoyen Vitro S5")
model_menu.add("Jetinno JL22", "Jetinno JL24", "Jetinno JL300")

# –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
action_menu = ReplyKeyboardMarkup(resize_keyboard=True)
action_menu.add("üìõ –£ –º–µ–Ω—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å!", "üìò –û–±—É—á–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
action_menu.add("‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?")

# –ú–µ–Ω—é —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
problem_menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
problem_menu.add(
    "üß† –Ø –∑–Ω–∞—é –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏",
    "üßØ –ü—Ä–æ–ª–∏–≤ –∏–ª–∏ –ø—Ä–æ—Ç–µ—á–∫–∞", "üîå –ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è",
    "üí≥ –ê–ø–ø–∞—Ä–∞—Ç –Ω–µ –Ω–∞–ª–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã",
    "‚ùó –ù–∞ –Ω–∞–ø–∏—Ç–∫–∞—Ö –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏",
    "üíß NO WATER / –Ω–µ—Ç –≤–æ–¥—ã",
    "üóë –°–ª–∏–≤ –æ—Ç—Ö–æ–¥–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
    "‚öôÔ∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º",
    "üåÄ –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∏–∫—Å–µ—Ä–æ–º",
    "üëé –ù–µ–≤–∫—É—Å–Ω—ã–π –∫–æ—Ñ–µ",
    "üîß –ó–∞–≤–∞—Ä–æ—á–Ω—ã–π –±–ª–æ–∫ (F.ESPRSS.UNT.POS)",
    "ü•´ –°—É—Ö–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–º–æ–ª–æ–∫–æ, —à–æ–∫–æ–ª–∞–¥, –∫–∞—Ä–∞–º–µ–ª—å –∏ —Ç.–¥.)",
    "‚öôÔ∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥—Ä–∏–Ω–¥–µ—Ä–æ–º",
    "ü§∑ –Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –∑–∞ –ø—Ä–æ–±–ª–µ–º–∞"
)

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã:")

@dp.message_handler(lambda msg: msg.text in allowed_serials)
async def verify_serial(message: types.Message):
    await message.answer("‚úÖ –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü—Ä–æ–¥–æ–ª–∂–∏–º:", reply_markup=main_menu)

@dp.message_handler(lambda msg: msg.text == "‚òï –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã")
async def choose_model(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –º–æ–¥–µ–ª—å:", reply_markup=model_menu)

@dp.message_handler(lambda msg: msg.text in ["Azkoyen Vitro S1", "Azkoyen Vitro S5", "Jetinno JL22", "Jetinno JL24", "Jetinno JL300"])
async def model_selected(message: types.Message):
    model = message.text
    if "Azkoyen" in model:
        info = "‚ÑπÔ∏è –í–ê–ñ–ù–û\n\n–ù–∞ —ç–∫—Ä–∞–Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∞.\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –¥–≤–µ—Ä—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É PROG (–∏–ª–∏ C –Ω–∞ –ø—É–ª—å—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ S5).\n\n–û—à–∏–±–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —Å–ø—Ä–∞–≤–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –ó–∞–ø–æ–º–Ω–∏—Ç–µ –∏–ª–∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –µ—ë.\n\nüî∏ –ï—Å–ª–∏ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–µ—Ç ‚Äî –æ—à–∏–±–æ–∫ —Å–µ–π—á–∞—Å –Ω–µ—Ç.\n–ï—Å–ª–∏ –Ω–∞–ø–∏—Ç–∫–∏ –Ω–µ –Ω–∞–∂–∏–º–∞—é—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç."
    else:
        info = "‚ÑπÔ∏è –í–ê–ñ–ù–û\n\n–ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ª–æ–≥–æ—Ç–∏–ø Fastkava –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n\n–°–ø—Ä–∞–≤–∞ –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫. –ó–∞–ø–æ–º–Ω–∏—Ç–µ –∏–ª–∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–µ–∫—É—â—É—é –æ—à–∏–±–∫—É."
    await message.answer(info)
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=action_menu)

@dp.message_handler(lambda msg: msg.text == "üìõ –£ –º–µ–Ω—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å!")
async def problems_list(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —É –∞–≤—Ç–æ–º–∞—Ç–∞:", reply_markup=problem_menu)

@dp.message_handler(lambda msg: msg.text == "üß† –Ø –∑–Ω–∞—é –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏")
async def known_error(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: NO WATER, GRINDER JAM)")

@dp.message_handler(lambda msg: "NO WATER" in msg.text.upper())
async def no_water_solution(message: types.Message):
    await message.answer("üíß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: NO WATER\n\n...\n(–≤—Å—Ç–∞–≤–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å—é–¥–∞ ‚Äî —Ç—ã –µ—ë —É–∂–µ –¥–∞–ª, –∏ —è –∑–∞–≥—Ä—É–∂—É –≤ –∫–æ–¥)")

@dp.message_handler(lambda msg: "NO WASTE BIN" in msg.text.upper())
async def waste_bin_solution(message: types.Message):
    await message.answer("üóë –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: NO WASTE BIN\n\n...\n(–∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–º–µ–Ω–µ –∏ —Å–±—Ä–æ—Å—É —Å—á—ë—Ç—á–∏–∫–∞)")

# –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫...

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
from flask import Flask
import threading

app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running!"

def run_flask():
    app.run(host='0.0.0.0', port=10000)

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    import asyncio
    from aiogram import executor
    from bot import dp  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π Dispatcher –∏–∑ —Å–≤–æ–µ–≥–æ –∫–æ–¥–∞

    asyncio.run(executor.start_polling(dp, skip_updates=True))



