import os
import threading
import json

from flask import Flask
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
VERIFIED_FILE = 'verified.json'

def load_verified() -> set[int]:
    if os.path.exists(VERIFIED_FILE):
        with open(VERIFIED_FILE, 'r', encoding='utf-8') as f:
            return set(json.load(f))
    return set()

def save_verified(users: set[int]):
    with open(VERIFIED_FILE, 'w', encoding='utf-8') as f:
        json.dump(list(users), f, ensure_ascii=False, indent=2)

verified_users = load_verified()

class Form(StatesGroup):
    serial = State()

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ====
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# ==== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ====
main_menu = ReplyKeyboardMarkup(resize_keyboard=True).add("‚òï –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã")
model_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "Azkoyen Vitro S1", "Azkoyen Vitro S5",
    "Jetinno JL22", "Jetinno JL24", "Jetinno JL300"
)
action_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "üìõ –£ –º–µ–Ω—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å!", "üìò –û–±—É—á–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
).add("‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?")
problem_menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(
    "üß† –Ø –∑–Ω–∞—é –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏",
    "üßØ –ü—Ä–æ–ª–∏–≤ –∏–ª–∏ –ø—Ä–æ—Ç–µ—á–∫–∞",
    "üîå –ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è",
    "üíß NO WATER / –Ω–µ—Ç –≤–æ–¥—ã",
    "üóë –°–ª–∏–≤ –æ—Ç—Ö–æ–¥–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
    "üîß –ó–∞–≤–∞—Ä–æ—á–Ω—ã–π –±–ª–æ–∫ (F.ESPRSS.UNT.POS)"
)

# ==== –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤ ====
allowed_serials = {
    "0010258608", "0010289689", "0010289069", "0010289073",
    # ‚Ä¶ –æ—Å—Ç–∞–ª—å–Ω–æ–π —Å–ø–∏—Å–æ–∫ ‚Ä¶
}

# ==== Handlers ====

@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    if message.from_user.id in verified_users:
        await state.finish()
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)
    else:
        await Form.serial.set()
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã:")


@dp.message_handler(state=Form.serial)
async def process_serial(message: types.Message, state: FSMContext):
    sn = message.text.strip()
    if sn in allowed_serials:
        verified_users.add(message.from_user.id)
        save_verified(verified_users)
        await state.finish()
        await message.answer("‚úÖ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!", reply_markup=main_menu)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")


@dp.message_handler(lambda m: m.text == "‚òï –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã", state='*')
async def choose_model(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=model_menu)


@dp.message_handler(lambda m: m.text.startswith(("Azkoyen", "Jetinno")), state='*')
async def model_selected(message: types.Message):
    if "Azkoyen" in message.text:
        text = (
            "‚ÑπÔ∏è –í–ê–ñ–ù–û\n\n"
            "–ù–∞ —ç–∫—Ä–∞–Ω–µ Azkoyen –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–≤–µ—Ä—å –∏ –Ω–∞–∂–º–∏—Ç–µ PROG/C, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø—Ä–∞–≤–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.\n\n"
            "–ï—Å–ª–∏ –Ω–µ—Ç –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ ‚Äî –æ—à–∏–±–æ–∫ –Ω–µ—Ç. –ò–Ω–∞—á–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ."
        )
    else:
        text = (
            "‚ÑπÔ∏è –í–ê–ñ–ù–û\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ª–æ–≥–æ—Ç–∏–ø Fastkava –≤ —É–≥–ª—É, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n"
            "–°–º–æ—Ç—Ä–∏—Ç–µ –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫ —Å–ø—Ä–∞–≤–∞."
        )
    await message.answer(text)
    await message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=action_menu)


@dp.message_handler(lambda m: m.text == "üìõ –£ –º–µ–Ω—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å!", state='*')
async def problems_list(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=problem_menu)


@dp.message_handler(lambda msg: "F.ESPRSS.UNT.POS" in msg.text.upper() or "G.ESPRESSO UNIT" in msg.text.upper(), state='*')
async def espress_unit_error(message: types.Message):
    await message.answer(
        "üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: F.ESPRSS.UNT.POS (G.ESPRESSO UNIT)\n\n"
        "‚ùó –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∑–∞–≤–∞—Ä–æ—á–Ω—ã–π –±–ª–æ–∫ ¬´–∑–∞—Å—Ç—Ä—è–ª¬ª –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n\n"
        "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—à–∞–≥–æ–≤–æ:\n"
        "1. ‚ö° –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç\n"
        "   ‚Äî –û—Ç–∫–ª—é—á–∏—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5‚Äâ—Å–µ–∫ –∏ –≤–∫–ª—é—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ\n"
        "   ‚Äî –î–æ–ª–∂–Ω—ã —Å–ª—ã—à–∞—Ç—å—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ ¬´–≥—É–ª¬ª –∏ —â–µ–ª—á–æ–∫ –º–æ—Ç–æ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ –±–ª–æ–∫\n\n"
        "2. üö™ –û—Ç–∫—Ä–æ–π—Ç–µ –¥–≤–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å:\n"
        "   ‚Ä¢ –í—Å—ë —Å—Ç–æ–∏—Ç —Ä–æ–≤–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–ª–∏–Ω–∏–ª–æ\n"
        "   ‚Ä¢ –ë–ª–æ–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω ¬´—Ñ–ª–∞–∂–∫–∞–º–∏¬ª —Å–≤–µ—Ä—Ö—É-—Å–ø—Ä–∞–≤–∞ –∏ —Å–Ω–∏–∑—É-—Å–ª–µ–≤–∞\n\n"
        "üîß –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ ‚Äî —Å–Ω–∏–º–∏—Ç–µ –∑–∞–≤–∞—Ä–æ—á–Ω—ã–π –±–ª–æ–∫ –≤—Ä—É—á–Ω—É—é:\n"
        "   1. –ù–∞–π–¥–∏—Ç–µ –ø–æ—Ä—à–µ–Ω—å (–∫ –Ω–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Ç—Ä—É–±–∫–∞ –ø–æ–¥–∞—á–∏ –∫–æ—Ñ–µ)\n"
        "   2. –°–Ω–∏–º–∏—Ç–µ –º–∏–∫—Å–µ—Ä (–±–µ–∂–µ–≤–∞—è –¥–µ—Ç–∞–ª—å —Å –∫—Ä–∞—Å–Ω–æ–π —Ç—Ä—É–±–∫–æ–π)\n"
        "   3. –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –∫—Ä–µ–ø–ª–µ–Ω–∏—è: –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ¬´—Ñ–ª–∞–∂–∫–∏¬ª –≤ –æ—Ç–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–æ—Ç—è–Ω–∏—Ç–µ –±–ª–æ–∫ –≤–≤–µ—Ä—Ö ‚Äî —Å–Ω–∏–º–∏—Ç–µ\n"
        "   4. –í–Ω—É—Ç—Ä–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ –∑–∞–ø—Ä–µ—Å—Å–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–µ—Ç–∫—É ‚Äî –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –≤—ã–∫–æ–≤—ã—Ä—è–π—Ç–µ –µ—ë –∑—É–±–æ—á–∏—Å—Ç–∫–æ–π –∏–ª–∏ –Ω–æ–∂–æ–º\n"
        "   5. –ü—Ä–æ–º–æ–π—Ç–µ –±–ª–æ–∫, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ:\n"
        "      ‚Ä¢ –ó–∞–∫—Ä–µ–ø–∏—Ç–µ –æ–±–∞ ¬´—Ñ–ª–∞–∂–∫–∞¬ª\n"
        "      ‚Ä¢ –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–±—É –ø–æ—Ä—à–Ω—è –Ω–∞ –º–µ—Å—Ç–æ\n"
        "      ‚Ä¢ –ü–ª–æ—Ç–Ω–æ –∑–∞—â—ë–ª–∫–Ω–∏—Ç–µ –º–∏–∫—Å–µ—Ä\n\n"
        "6. ‚ö° –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç –µ—â—ë —Ä–∞–∑\n\n"
        "üì∏ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å ‚Äî —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –±–ª–æ–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∏ –≤—ã—à–ª–∏—Ç–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ."
    )


@dp.message_handler(lambda msg: "NO WASTE BIN" in msg.text.upper(), state='*')
async def no_waste_bin_error(message: types.Message):
    await message.answer(
        "üóë –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: NO WASTE BIN\n\n"
        "‚ùó –ê–ø–ø–∞—Ä–∞—Ç –Ω–µ –≤–∏–¥–∏—Ç –ª–æ—Ç–æ–∫ –¥–ª—è –æ—Ç—Ö–æ–¥–æ–≤.\n\n"
        "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—à–∞–≥–æ–≤–æ:\n"
        "1. üì¶ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏\n"
        "   ‚Äî –ò–Ω–æ–≥–¥–∞ –µ–≥–æ –∑–∞–±—ã–≤–∞—é—Ç –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏\n\n"
        "2. üîÑ –í—ã–Ω—å—Ç–µ –ª–æ—Ç–æ–∫ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ –¥–æ —É–ø–æ—Ä–∞\n"
        "   ‚Äî –õ–æ—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –ø–ª–æ—Ç–Ω–æ –≤–æ–π—Ç–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–º\n\n"
        "3. üßº –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É –∏ —Å–∞–º –ª–æ—Ç–æ–∫:\n"
        "   ‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã —á–∏—Å—Ç—ã–µ, –±–µ–∑ –ø–æ—Ä–æ—à–∫–∞ –∏ –∫–∞–ø–µ–ª—å\n"
        "   ‚Ä¢ –õ–æ—Ç–æ–∫ –Ω–µ –ø–µ—Ä–µ–∫–æ—à–µ–Ω, –Ω–µ –∑–∞–±–∏—Ç –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤\n\n"
        "‚öôÔ∏è –ï—Å–ª–∏ –Ω–µ —É—Ö–æ–¥–∏—Ç ‚Äî —Å–±—Ä–æ—Å—å—Ç–µ —Å—á—ë—Ç—á–∏–∫ –æ—Ç—Ö–æ–¥–æ–≤:\n"
        "   ‚Ä¢ –í —Å–µ—Ä–≤–∏—Å–Ω–æ–º –º–µ–Ω—é (PROG/C) –≤—ã–±–µ—Ä–∏—Ç–µ Test Machine ‚Üí –ø—É–Ω–∫—Ç 114\n"
        "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ D, –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∞–º–∏ A/B —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ —Ü–∏—Ñ—Ä—ã –≤ 00000\n"
        "   ‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ C –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑\n"
        "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç 2‚Äì3 —Ä–∞–∑–∞\n\n"
        "üì∏ –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç ‚Äî —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —ç–∫—Ä–∞–Ω –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–æ—Ç–∫–∞."
    )


@dp.message_handler(lambda msg: "NO WATER" in msg.text.upper(), state='*')
async def no_water_error(message: types.Message):
    await message.answer(
        "üíß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: NO WATER\n\n"
        "‚ùó –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–±—Ä–∞—Ç—å –≤–æ–¥—É.\n\n"
        "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—à–∞–≥–æ–≤–æ:\n"
        "1. üì¶ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∫–∞–Ω–∏—Å—Ç—Ä–µ –µ—Å—Ç—å –≤–æ–¥–∞\n"
        "2. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∞—á—É:\n"
        "   ‚Ä¢ –¢—Ä—É–±–∫–∞ –ø–æ–¥–∞—á–∏ –Ω–µ –ø–µ—Ä–µ–∂–∞—Ç–∞ (–ø–æ–¥ –Ω–æ–∂–∫–æ–π –∏–ª–∏ –≤ –º–µ–±–µ–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–∏)\n\n"
        "3. ‚ö° –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç\n"
        "   ‚Äî –û—Ç–∫–ª—é—á–∏—Ç–µ/–≤–∫–ª—é—á–∏—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑\n"
        "   ‚Äî –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª—ã—à–Ω—ã –∑–≤—É–∫–∏ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –Ω–∞—Å–æ—Å–∞\n\n"
        "üì∏ –ï—Å–ª–∏ –¥–∞–∂–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–æ–¥–∞ –Ω–µ –∏–¥—ë—Ç ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∫–∞–Ω–∏—Å—Ç—Ä—ã –∏ —Ç—Ä—É–±–æ–∫."
    )


# ==== HTTP –¥–ª—è Render (keep-alive) ====
app = Flask(__name__)

@app.route("/")
def ping():
    return "OK", 200

def run_flask():
    port = int(os.getenv("PORT", 10000))  # <- –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000
    app.run(host="0.0.0.0", port=port)
    
# ==== –°–±—Ä–æ—Å webhook –ø–µ—Ä–µ–¥ polling ====
async def on_startup(dp: Dispatcher):
    await bot.delete_webhook(drop_pending_updates=True)

# ==== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ====
if __name__ == "__main__":
    
    threading.Thread(target=run_flask, daemon=True).start()

    
    executor.start_polling(
        dispatcher=dp,
        skip_updates=True,
        on_startup=lambda dp: bot.delete_webhook(drop_pending_updates=True)
    )

